import json
import os
import sys
import getpass
import hashlib
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

class BackupDecryptor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ backup —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.user_home = Path.home()
        self.app_data_dir = self.user_home / ".sapphire0.1.0"
        self.password_hash_file = self.app_data_dir / ".password_hash"
        self.backups_dir = self.app_data_dir / "ethereum_keys" / "backups"
        self.encryption_key = None
    
    def authenticate_and_get_key(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        if not self.password_hash_file.exists():
            print("‚ùå –§–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
        
        for attempt in range(3):
            password = getpass.getpass(f"–ü–∞—Ä–æ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): ")
            
            if self.verify_password(password):
                self.encryption_key = self.derive_key(password)
                print("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!")
                return True
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {2 - attempt}")
        
        return False
    
    def verify_password(self, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        try:
            with open(self.password_hash_file, 'r') as f:
                hash_data = json.load(f)
            
            salt = base64.b64decode(hash_data["salt"])
            stored_hash = base64.b64decode(hash_data["hash"])
            iterations = hash_data.get("iterations", 100000)
            
            password_hash = hashlib.pbkdf2_hmac('sha256',
                                              password.encode('utf-8'),
                                              salt,
                                              iterations)
            
            return password_hash == stored_hash
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
            return False
    
    def derive_key(self, password):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–æ–ª—è"""
        try:
            with open(self.password_hash_file, 'r') as f:
                hash_data = json.load(f)
            salt = base64.b64decode(hash_data["salt"])
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–ª—å")
            return None
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return Fernet(key)
    
    def decrypt_backup_file(self, backup_file_path):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ backup —Ñ–∞–π–ª–∞"""
        if not self.encryption_key:
            print("‚ùå –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return None
        
        try:
            # –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(backup_file_path, 'rb') as f:
                encrypted_data = f.read()
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            decrypted_data = self.encryption_key.decrypt(encrypted_data)
            
            # –ü–∞—Ä—Å–∏–º JSON
            wallet_data = json.loads(decrypted_data.decode())
            
            return wallet_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
            return None
    
    def decrypt_from_text(self, encrypted_text):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if not self.encryption_key:
            print("‚ùå –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return None
        
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
            encrypted_text = encrypted_text.strip()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            encrypted_data = encrypted_text.encode()
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            decrypted_data = self.encryption_key.decrypt(encrypted_data)
            
            # –ü–∞—Ä—Å–∏–º JSON
            wallet_data = json.loads(decrypted_data.decode())
            
            return wallet_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
            return None
    
    def list_backup_files(self):
        """–°–ø–∏—Å–æ–∫ backup —Ñ–∞–π–ª–æ–≤"""
        if not self.backups_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ backup –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return []
        
        backup_files = list(self.backups_dir.glob("*.backup"))
        
        if not backup_files:
            print("üìÅ Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤: {len(backup_files)}")
        for i, backup_file in enumerate(backup_files, 1):
            print(f"{i}. {backup_file.name}")
        
        return backup_files
    
    def display_wallet_info(self, wallet_data):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ"""
        if not wallet_data:
            return
        
        print("\n" + "="*60)
        print("üíº –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–®–ï–õ–¨–ö–ï")
        print("="*60)
        
        print(f"üìõ –ò–º—è: {wallet_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üìç –ê–¥—Ä–µ—Å: {wallet_data.get('address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {wallet_data.get('private_key', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {wallet_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üè∑Ô∏è –¢–∏–ø: {wallet_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üåê –°–µ—Ç—å: {wallet_data.get('network', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        if 'mnemonic' in wallet_data:
            print(f"üî§ –ú–Ω–µ–º–æ–Ω–∏–∫–∞: {wallet_data['mnemonic']}")
        
        print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ Sapphire Backup")
    print("="*40)
    
    decryptor = BackupDecryptor()
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not decryptor.authenticate_and_get_key():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        return
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
    print("1. üìÅ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ backup")
    print("2. üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    print("3. ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        backup_files = decryptor.list_backup_files()
        if not backup_files:
            return
        
        try:
            file_num = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞: ")) - 1
            if 0 <= file_num < len(backup_files):
                backup_file = backup_files[file_num]
                print(f"\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞: {backup_file.name}")
                
                wallet_data = decryptor.decrypt_backup_file(backup_file)
                decryptor.display_wallet_info(wallet_data)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    elif choice == "2":
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            import pyperclip
            encrypted_text = pyperclip.paste()
            print("üìã –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            
            wallet_data = decryptor.decrypt_from_text(encrypted_text)
            decryptor.display_wallet_info(wallet_data)
            
        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å pyperclip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
    
    elif choice == "3":
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        print("\nüìù –í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        encrypted_text = input().strip()
        
        # –í–∞—à –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if not encrypted_text:
            encrypted_text = "gAAAAABoZyo0SCMTvc-K1WsV2qcHG64ZulxnKt8Dp_gbwuD3b-c23xd0nWvh_Gy530SV0uEyAsY5MpVyM5LUtJwXfIhzMrqeIKD_4tm8xJhtnA_lVLAD8BfG1GxxDM_8SSRHiETJwride0VsZhJikHy94mT4HZ0z5eHpdiPAiohFcadzXzUmD_hpdqtEo80Jhc1s1SkPkSdFpD6XDzHLWxsYjK8Od2k5uoCwDI1LTMNm_Sc9B9A6wtUeBWYb6zyNnZ0UlSufMVYnqKx8Lk14213gKtHGhYImjl8o5WOIR-b4F7tt3MaQG3hDRzZ__JzLX_-Al2gH0qRhq37czji1K5QziH2kyNENKrP9XtgobfZe5NNwJnZpIyjOypMH9kNZXchwnZRL6KQWpvJXQLTvT32jCu-wAHdut1SJPqeGu0yqAVwDBok48Rs="
            print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
        
        wallet_data = decryptor.decrypt_from_text(encrypted_text)
        decryptor.display_wallet_info(wallet_data)
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")